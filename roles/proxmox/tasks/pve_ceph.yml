---

# 1. Initalise Ceph (Datacentre -> Ceph -> setup Ceph)
# See: https://github.com/lae/ansible-role-proxmox/blob/main/tasks/ceph.yml
- block:
  - name: Create initial Ceph config
    command: "pveceph init --network {{ _ceph_network_frontend_ip }}/{{ pve_ceph_net_front_cidr }}  \
    {% if pve_ceph_network_backend is defined  %} \
                --cluster-network {{ _ceph_network_backend_ip }}/{{ pve_ceph_net_back_cidr }}
    {% endif %}"
    args:
      creates: /etc/ceph/ceph.conf

  - name: Create initial Ceph monitor
    command: 'pveceph mon create'
    args:
      creates: '/var/lib/ceph/mon/ceph-{{ ansible_hostname }}/'
    register: _ceph_initial_mon

  - name: Fail if initial monitor creation failed
    fail:
      msg: 'Ceph intial monitor creation failed.'
    when: _ceph_initial_mon is failed
  when: "inventory_hostname == groups[pve_ceph_mon_group][0]"

# 2. Create additional monitors for other nodes under node -> ceph -> monitor
- name: Create additional Ceph monitors
  command: 'pveceph mon create'
  args:
    creates: '/var/lib/ceph/mon/ceph-{{ ansible_hostname }}/'
  when: 
  - "inventory_hostname != groups[pve_ceph_mon_group][0]"
  - "inventory_hostname in groups[pve_ceph_mon_group]"

# 3. Set mgr module facts
- import_tasks: pve_ceph_mgr_modules.yml
  when: "inventory_hostname == groups[pve_ceph_mon_group][0]"

# 4. Install the Ceph Manager Dashboard on node 1
- import_tasks: pve_ceph_mgr_dashboard.yml
  when: "inventory_hostname == groups[pve_ceph_mon_group][0]"

# 5. Enable diskprediction module: https://docs.ceph.com/en/quincy/mgr/diskprediction/
- name: Enable diskprediction mgr module
  shell: ceph mgr module enable diskprediction_local
  when: 'inventory_hostname == groups[pve_ceph_mon_group][0] and "diskprediction_local" in _disabled_ceph_mgr_modules'

# 6. Add redundant manager nodes on remaining nodes
- name: Add ceph-mgr on remaining nodes
  command: 'pveceph mgr create'
  args:
    creates: '/var/lib/ceph/mgr/ceph-{{ ansible_hostname }}/'
  when: "inventory_hostname in groups[pve_ceph_mgr_group]"

# 7. Enable device_failure_prediction_mode local global
#     - https://docs.ceph.com/en/latest/rados/operations/devices/
#     - https://www.youtube.com/watch?v=KFBuqTyxalM
- block:
  - name: check if device_failure_prediction_mode is enabled
    command: ceph config dump -f json
    register: _ceph_config
    changed_when: false
    check_mode: no
  
  - name: set fact for device_failure_prediction_mode
    set_fact:
      _ceph_device_failure_prediction_mode: "{{ item.value }}"
    with_items: "{{ _ceph_config.stdout|from_json|json_query('[]') }}"
    when: item.name == 'device_failure_prediction_mode'

  - name: device_failure_prediction_mode local global
    shell: ceph config set global device_failure_prediction_mode local
    when: "_ceph_device_failure_prediction_mode is not defined or _ceph_device_failure_prediction_mode != 'local'"
  when: "inventory_hostname == groups[pve_ceph_mon_group][0]"

# (Optional) Check for existing OSD's on host
# - block:
#   - name: Query for existing Ceph volumes
#     pve_ceph_volume:
#     check_mode: no
#     register: _ceph_volume_data

#   - name: Generate a list of active OSDs
#     ansible.builtin.set_fact:
#       _existing_ceph_osds: "{{ _ceph_volume_data.stdout | from_json | json_query('*[].devices[]') | default([]) }}"
  
#   - name: debug
#     debug:
#       msg: "{{_existing_ceph_osds}}"

# (Optional) Define expected OSD's and create OSD's if not present
# - block:
#   - name: Generate list of unprovisioned OSDs
#     ansible.builtin.set_fact:
#       _ceph_osds_diff: "{{ _ceph_osds_diff | default([]) + [item] }}"
#     loop: "{{ pve_ceph_osds }}"
#     when: item.device not in _existing_ceph_osds

#   - name: Create Ceph OSDs
#     ansible.builtin.command: >-
#       pveceph osd create {{ item.device }}
#       {% if "encrypted" in item and item["encrypted"] | bool %}--encrypted 1{% endif %}
#       {% if "block.db" in item %}--db_dev {{ item["block.db"] }}{% endif %}
#       {% if "block.wal" in item %}--wal_dev {{ item["block.wal"] }}{% endif %}
#     loop: '{{ _ceph_osds_diff | default([]) }}'
