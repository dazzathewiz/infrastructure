---

# Adds packages for no-subscription model, as seen in: https://www.youtube.com/watch?v=GoZaMgEgrHw
- name: Add "no-subscription" apt source
  blockinfile:
    path: /etc/apt/sources.list
    block: |
      # not for production user
      deb http://download.proxmox.com/debian {{ ansible_distribution_release }} pve-no-subscription
  register: update_apt_nosub

- name: Remove "pve-enterprise" apt source
  lineinfile:
    dest: /etc/apt/sources.list.d/pve-enterprise.list
    regexp: "^deb https://enterprise.proxmox.com/debian/pve {{ ansible_distribution_release }} pve-enterprise"
    line: "# deb https://enterprise.proxmox.com/debian/pve {{ ansible_distribution_release }} pve-enterprise"
  register: update_apt_enterprise

- name: Add Proxmox Ceph repository
  apt_repository:
    repo: '{{ pve_ceph_repository_line }}'
    filename: ceph
    state: present
  register: _pve_ceph_repo
  when: "pve_ceph_enabled | bool"

- name: Update packages
  apt:
    update_cache: yes
    cache_valid_time: 3600
    upgrade: yes
  when: update_apt_nosub.changed or update_apt_enterprise.changed or _pve_ceph_repo.changed

- import_tasks: identify_needed_packages.yml

- name: Install related packages
  apt:
    update_cache: yes
    cache_valid_time: 3600
    name: "{{ _pve_install_packages }}"
    state: "{{ 'latest' if pve_run_proxmox_upgrades else 'present' }}"
  retries: 2
  register: _proxmox_install
  until: _proxmox_install is succeeded

# from: https://forum.proxmox.com/threads/when-to-reboot.29230/
- name: Check if reboot required
  shell:  "[ `ls -tr /boot/initrd* | tail -1 | cut -d '-' -f 2-` != `uname -r` ]"
  register: result
  ignore_errors: true
  failed_when: result == 2
  changed_when: result.rc == 0
  notify: restart pve node


# Identify the processor manufacturer by looking for "Intel" or "AMD"
# in `/proc/cpuinfo`.
- name: check if Intel processor
  command: grep -q Intel /proc/cpuinfo
  ignore_errors: true
  register: is_intel
  failed_when: is_intel == 2
  changed_when: false

- name: check if AMD processor
  command: grep -q AMD /proc/cpuinfo
  ignore_errors: true
  register: is_amd
  failed_when: is_amd == 2
  changed_when: false

# IOMMU needs to be enabled but note Linux enables differently between Bootmanagers
# GRUB and SYSTEMD and depends on the AMD or Intel CPU. 
# Proxmox uses both but it seems when booting from ZFS it specifically uses SYSTEMD.
# See: https://forum.level1techs.com/t/proxmox-6-2-4-task-error-iommu-not-present-solved/157587/2 
# Enabling IOMMU: https://www.servethehome.com/how-to-pass-through-pcie-nics-with-proxmox-ve-on-intel-and-amd/

- name: Update GRUB to enable iommu at boot - Intel CPU
  lineinfile:
    dest: /etc/default/grub
    regexp: "^GRUB_CMDLINE_LINUX_DEFAULT"
    line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on i915.enable_gvt=1"'
  when: is_intel.rc == 0 and _pve_bootloader == 'grub'
  register: update_grub_intel

- name: Update GRUB to enable iommu at boot - AMD CPU
  lineinfile:
    dest: /etc/default/grub
    regexp: "^GRUB_CMDLINE_LINUX_DEFAULT"
    line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet amd_iommu=on"'
  when: is_amd.rc == 0 and _pve_bootloader == 'grub'
  register: update_grub_amd

- name: update-grub
  shell: update-grub
  when: update_grub_intel.changed or update_grub_amd.changed
  register: update_grub

- name: Check presence of iommu in /etc/kernel/cmdline
  command: grep -q 'quiet intel_iommu=on' /etc/kernel/cmdline
  ignore_errors: true
  register: systemd_iommu_configured
  failed_when: systemd == 2
  changed_when: false

- name: Update /etc/kernel/cmdline to enable iommu - Intel CPU
  lineinfile:
    path: /etc/kernel/cmdline
    backrefs: yes
    regexp: "^(.*boot=.*)$"
    line: '\1 quiet intel_iommu=on'
  when: is_intel.rc == 0 and _pve_bootloader == 'systemd' and systemd_iommu_configured.rc != 0
  register: update_cmdline_intel

- name: Update /etc/kernel/cmdline to enable iommu - AMD CPU
  lineinfile:
    path: /etc/kernel/cmdline
    backrefs: yes
    regexp: "^(.*boot=.*)$"
    line: '\1 quiet amd_iommu=on'
  when: is_amd.rc == 0 and _pve_bootloader == 'systemd' and systemd_iommu_configured.rc != 0
  register: update_cmdline_amd

- name: update boot tool
  shell: proxmox-boot-tool refresh
  when: update_cmdline_intel.changed or update_cmdline_amd.changed
  register: update_proxboot

- name: Register modules for vfio
  lineinfile:
    dest: /etc/modules
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^vfio$', line: 'vfio' }
    - { regexp: '^vfio_iommu_type1', line: 'vfio_iommu_type1' }
    - { regexp: '^vfio_pci', line: 'vfio_pci' }
    - { regexp: '^vfio_virqfd', line: 'vfio_virqfd' }
  register: vfio

- name: Register modules for Intel GPU passthrough (Intel GVT)
  lineinfile:
    dest: /etc/modules
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^kvmgt', line: 'kvmgt' }
    - { regexp: '^exngt', line: 'exngt' }
    - { regexp: '^vfio-mdev', line: 'vfio-mdev' }
  when: is_intel.rc == 0
  register: gvt

- debug: msg="{{ inventory_hostname }} needs reboot after grub or vfio/iommu changes"
  changed_when: true
  notify: restart pve node
  when: update_grub.changed or vfio.changed or gvt.changed or update_proxboot.changed

# After reboot please verify:
# IOMMU is enabled: `dmesg | grep -e DMAR -e IOMMU`


# check and update hostname (see: https://pve.proxmox.com/wiki/Renaming_a_PVE_node)
- name: Update hostname in /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: "^{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    line: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }} {{ inventory_hostname }}.{{ ansible_dns['search'][0] }} {{ inventory_hostname }}"
  register: update_hostname1

- name: Update hostname in /etc/hostname
  lineinfile:
    dest: /etc/hostname
    regexp: ".*"
    line: "{{ inventory_hostname }}"
  register: update_hostname2

- debug: msg="{{ inventory_hostname }} needs reboot after hostname changes"
  changed_when: true
  notify: restart pve node
  when: update_hostname1.changed or update_hostname2.changed

- name: Set DNS servers in /etc/resolv.conf
  lineinfile:
    dest: /etc/resolv.conf
    regexp: "^nameserver {{ item }}"
    line: "nameserver {{ item }}"
  with_items:
    - "{{ dns }}"

- name: Trigger node reboots for updated config settings
  meta: flush_handlers
